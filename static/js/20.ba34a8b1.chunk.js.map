{"version":3,"sources":["api/registrationConfirmation.ts","pages/confirmation-email/ConfirmationEmail.tsx","pages/confirmation-email/useConfirmationEmail.ts"],"names":["registrationConfirmation","data","a","ApiService","method","url","resp","error_id","notify","type","description","ERROR_CODES","ConfirmationEmail","isEmailConfirmed","useState","setIsEmailConfirmed","useSearchParams","searchParams","fetchData","useCallback","params","forEach","value","key","success","useEffect","useConfirmationEmail","t","useTranslation","isMobile","useIsMobile","className","src","ImgConfirmationEmail","alt","to"],"mappings":"uOAIaA,EAAwB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEACjBC,YAAgB,CAAEC,OAAQ,MAAOC,IAAK,iCAAkCJ,SADvD,YAEhC,QADEK,EAD8B,cAEhC,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,WAA8C,KAAlC,OAACD,QAAD,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,UAFtB,uBAGhCC,YAAO,CAAEC,KAAM,UAAWC,YAAaC,IAAW,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAcL,YAAhB,aAAC,EAAqBM,YAHxC,mBAIzB,GAJyB,iCAM7B,GAN6B,2CAAH,sD,gBC4BtBK,UAvBe,WAAO,IACzBC,ECNwB,WAAO,IAAD,EACUC,oBAAkB,GAD5B,mBAC/BD,EAD+B,KACbE,EADa,OAGfC,cAAhBC,EAH+B,oBAKhCC,EAAYC,sBAAW,uCAAC,WAAOC,GAAP,iBAAAlB,EAAA,6DACpBD,EAAY,GAElBmB,EAAOC,SAAQ,SAACC,EAAOC,GACP,UAARA,IACAtB,EAAKsB,GAAOD,GAEJ,oBAARC,IACAtB,EAAKsB,GAAOD,MARM,SAYJtB,EAAyBC,GAZrB,OAYpBuB,EAZoB,OAa1BT,EAAoBS,GAbM,2CAAD,sDAc1B,IAMH,OAJAC,qBAAU,WACNP,EAAUD,KACX,CAACC,EAAWD,IAER,CACHJ,oBDpByBa,GAArBb,iBACAc,EAAMC,cAAND,EACFE,EAAWC,cACjB,OACI,sBAAKC,UAAU,qBAAf,WACMF,GACE,qBAAKE,UAAU,4BAAf,SACI,qBAAKC,IAAKC,IAAsBC,IAAI,wBAG5C,sBAAKH,UAAU,2BAAf,UACKlB,GAAoB,oBAAIkB,UAAU,iCAAd,SAAgDJ,EAAE,4BACvE,qBAAKI,UAAU,mCAAf,SACI,cAAC,IAAD,CAAMA,UAAU,8CAA8CI,GAAG,SAAjE,SACKR,EAAE","file":"static/js/20.ba34a8b1.chunk.js","sourcesContent":["import { ApiService } from '.';\r\nimport { ERROR_CODES } from '../constants/errorCodes';\r\nimport { notify } from '../services/notifications';\r\n\r\nexport const registrationConfirmation = async (data: { email: string; confirmation_id: string }) => {\r\n    const resp = await ApiService<any>({ method: 'PUT', url: 'user/registration_confirmation', data });\r\n    if ((resp as any)?.data?.error_id && (resp as any)?.data?.error_id !== 0) {\r\n        notify({ type: 'WARNING', description: ERROR_CODES[(resp as any)?.data?.error_id] });\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n","import { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ImgConfirmationEmail } from '../../assets';\r\nimport { useIsMobile } from '../../context/useIsMobile';\r\nimport { useConfirmationEmail } from './useConfirmationEmail';\r\n\r\nimport './style.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst ConfirmationEmail: FC = () => {\r\n    const { isEmailConfirmed } = useConfirmationEmail();\r\n    const { t } = useTranslation();\r\n    const isMobile = useIsMobile();\r\n    return (\r\n        <div className=\"confirmation-email\">\r\n            {!isMobile && (\r\n                <div className=\"confirmation-email__image\">\r\n                    <img src={ImgConfirmationEmail} alt=\"Confirm email img\" />\r\n                </div>\r\n            )}\r\n            <div className=\"confirmation-email__form\">\r\n                {isEmailConfirmed && <h4 className=\"confirmation-email__form-title\">{t('lblConfirmationMessage')}</h4>}\r\n                <div className=\"confirmation-email__form-actions\">\r\n                    <Link className=\"confirmation-email__form-confirmation-email\" to=\"/login\">\r\n                        {t('lblLogin')}\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ConfirmationEmail;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport { registrationConfirmation } from '../../api/registrationConfirmation';\r\n\r\nexport const useConfirmationEmail = () => {\r\n    const [isEmailConfirmed, setIsEmailConfirmed] = useState<boolean>(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const fetchData = useCallback(async (params: URLSearchParams) => {\r\n        const data: any = {};\r\n\r\n        params.forEach((value, key) => {\r\n            if (key === 'email') {\r\n                data[key] = value;\r\n            }\r\n            if (key === 'confirmation_id') {\r\n                data[key] = value;\r\n            }\r\n        });\r\n\r\n        const success = await registrationConfirmation(data);\r\n        setIsEmailConfirmed(success);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchData(searchParams);\r\n    }, [fetchData, searchParams]);\r\n\r\n    return {\r\n        isEmailConfirmed,\r\n    };\r\n};\r\n"],"sourceRoot":""}