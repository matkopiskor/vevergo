{"version":3,"sources":["components/input/Input.tsx","api/register.ts","pages/register/Register.tsx","pages/register/useRegister.ts"],"names":["Input","props","label","onChange","value","placeholder","type","name","labelClassName","inputClassName","Prefix","disabled","infoText","required","className","title","InfoCircleOutlined","prefix","register","data","a","ApiService","method","url","resp","error_id","notify","description","ERROR_CODES","Item","Form","Register","onRegister","useCallback","values","successful","setRegistrationSuccessful","useState","registrationSuccessful","registerDisabled","setRegisterDisabled","formTitle","formSubtitle","onFormChange","_","password","password2","useRegister","t","useTranslation","isMobile","useIsMobile","src","ImgRegister","alt","onFinish","onValuesChange","rules","message","htmlType"],"mappings":"sLAqBaA,EAAmB,SAACC,GAAW,IAEpCC,EAYAD,EAZAC,MACAC,EAWAF,EAXAE,SACAC,EAUAH,EAVAG,MACAC,EASAJ,EATAI,YALmC,EAcnCJ,EARAK,YANmC,MAM5B,OAN4B,EAOnCC,EAOAN,EAPAM,KAPmC,EAcnCN,EANAO,sBARmC,MAQlB,GARkB,IAcnCP,EALAQ,sBATmC,MASlB,GATkB,EAUnCC,EAIAT,EAJAS,OACAC,EAGAV,EAHAU,SACAC,EAEAX,EAFAW,SACAC,EACAZ,EADAY,SAEJ,OACI,sBAAKC,UAAU,iBAAf,UACI,sBAAKA,UAAU,oBAAf,UACI,gCACI,uBAAOA,UAAS,uBAAkBN,GAAlC,SAAqDN,IACpDW,GAAY,sBAAMC,UAAU,wBAAhB,kBAEhBF,GACG,cAAC,IAAD,CAASG,MAAOH,EAAhB,SACI,cAACI,EAAA,EAAD,SAKZ,cAAC,IAAD,CACIV,KAAMA,EACNQ,UAAS,wBAAmBL,GAC5BN,SAAUA,EACVC,MAAOA,EACPC,YAAaA,EACbE,KAAMA,EACNU,OAAQP,EACRC,SAAUA,S,wKC7CbO,EAAQ,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEACDC,YAAgB,CAAEC,OAAQ,MAAOC,IAAK,2BAA4BJ,SADjE,YAEhB,QADEK,EADc,cAEhB,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,WAA8C,KAAlC,OAACD,QAAD,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,UAFtC,uBAGhBC,YAAO,CAAEpB,KAAM,UAAWqB,YAAaC,IAAW,OAAEJ,QAAF,IAAEA,GAAF,UAAEA,EAAcL,YAAhB,aAAC,EAAqBM,YAHxD,mBAIT,GAJS,iCAMb,GANa,2CAAH,sD,oDCHbI,EAASC,IAATD,KAsFOE,UApFM,WAAO,IAAD,ECTA,WACvB,IAAMC,EAAaC,sBAAW,uCAAC,WAAOC,GAAP,eAAAd,EAAA,sEACFF,EAASgB,GADP,OACrBC,EADqB,OAE3BC,EAA0BD,GAFC,2CAAD,sDAG3B,IAJ0B,EAK+BE,oBAAkB,GALjD,mBAKtBC,EALsB,KAKEF,EALF,OAMmBC,oBAAkB,GANrC,mBAMtBE,EANsB,KAMJC,EANI,KAoB7B,MAAO,CACHR,aACAM,yBACAG,UAfcH,EAAyB,4BAA8B,mBAgBrEI,aAfiBJ,EAAyB,mCAAqC,8BAgB/EK,aAdiBV,uBAAY,SAACW,EAAGV,GAAiB,IAC1CW,EAAwBX,EAAxBW,SAAUC,EAAcZ,EAAdY,UAClB,GAAKD,GAAaC,EAIlB,OAAON,EAAoBK,IAAaC,GAHpCN,GAAoB,KAIzB,IAQCD,oBDfAQ,GADIf,EADe,EACfA,WAAYM,EADG,EACHA,uBAAwBG,EADrB,EACqBA,UAAWC,EADhC,EACgCA,aAAcC,EAD9C,EAC8CA,aAAcJ,EAD5D,EAC4DA,iBAE3ES,EAAMC,cAAND,EACFE,EAAWC,cAEjB,OACI,sBAAKrC,UAAU,WAAf,WACMoC,GACE,qBAAKpC,UAAU,kBAAf,SACI,qBAAKsC,IAAKC,IAAaC,IAAI,mBAGnC,sBAAKxC,UAAU,iBAAf,UACI,oBAAIA,UAAU,uBAAd,SAAsCkC,EAAEP,KACxC,mBAAG3B,UAAU,6BAAb,SAA2CkC,EAAEN,MAC3CJ,GACE,eAAC,IAAD,CAAM/B,KAAK,gBAAgBgD,SAAUvB,EAAYwB,eAAgBb,EAAjE,UACI,cAACd,EAAD,CAAMtB,KAAK,WAAWkD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAA3D,SACI,cAAC,IAAD,CACI1C,KAAK,OACLD,YAAa2C,EAAE,eACf9C,MAAO8C,EAAE,eACTxC,eAAe,6BACfC,eAAe,2BAGvB,cAACoB,EAAD,CAAMtB,KAAK,aAAakD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAA7D,SACI,cAAC,IAAD,CACI1C,KAAK,OACLD,YAAa2C,EAAE,gBACf9C,MAAO8C,EAAE,gBACTxC,eAAe,6BACfC,eAAe,2BAGvB,cAACoB,EAAD,CAAMtB,KAAK,YAAYkD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAA5D,SACI,cAAC,IAAD,CACI1C,KAAK,OACLD,YAAa2C,EAAE,eACf9C,MAAO8C,EAAE,eACTxC,eAAe,6BACfC,eAAe,2BAGvB,cAACoB,EAAD,CAAMtB,KAAK,QAAQkD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAAxD,SACI,cAAC,IAAD,CACI1C,KAAK,QACLD,YAAa2C,EAAE,YACf9C,MAAO8C,EAAE,YACTxC,eAAe,6BACfC,eAAe,2BAGvB,cAACoB,EAAD,CAAMtB,KAAK,WAAWkD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAA3D,SACI,cAAC,IAAD,CACI1C,KAAK,WACLD,YAAa2C,EAAE,eACf9C,MAAO8C,EAAE,eACTxC,eAAe,6BACfC,eAAe,2BAGvB,cAACoB,EAAD,CAAMtB,KAAK,YAAYkD,MAAO,CAAC,CAAE5C,UAAU,EAAM6C,QAASV,EAAE,iBAA5D,SACI,cAAC,IAAD,CACI1C,KAAK,WACLD,YAAa2C,EAAE,qBACf9C,MAAO8C,EAAE,qBACTxC,eAAe,6BACfC,eAAe,2BAGvB,qBAAKK,UAAU,yBAAf,SACI,cAAC,IAAD,CAAQA,UAAU,0BAA0BH,SAAU4B,EAAkBoB,SAAS,SAAjF,SACKX,EAAE","file":"static/js/17.1fe683e4.chunk.js","sourcesContent":["import { ChangeEventHandler, FC } from 'react';\r\nimport { Input as AntInput, Tooltip } from 'antd';\r\n\r\nimport './Input.css';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\ninterface Props {\r\n    label?: string;\r\n    onChange?: ChangeEventHandler<HTMLInputElement>;\r\n    value?: string | number | undefined;\r\n    placeholder?: string;\r\n    type?: string;\r\n    name?: string;\r\n    labelClassName?: string;\r\n    inputClassName?: string;\r\n    Prefix?: JSX.Element;\r\n    disabled?: boolean;\r\n    infoText?: string;\r\n    required?: boolean;\r\n}\r\n\r\nexport const Input: FC<Props> = (props) => {\r\n    const {\r\n        label,\r\n        onChange,\r\n        value,\r\n        placeholder,\r\n        type = 'text',\r\n        name,\r\n        labelClassName = '',\r\n        inputClassName = '',\r\n        Prefix,\r\n        disabled,\r\n        infoText,\r\n        required,\r\n    } = props;\r\n    return (\r\n        <div className=\"input__wrapper\">\r\n            <div className=\"info-text-wrapper\">\r\n                <div>\r\n                    <label className={`input__label ${labelClassName}`}>{label}</label>\r\n                    {required && <span className=\"input__label-required\">*</span>}\r\n                </div>\r\n                {infoText && (\r\n                    <Tooltip title={infoText}>\r\n                        <InfoCircleOutlined />\r\n                    </Tooltip>\r\n                )}\r\n            </div>\r\n\r\n            <AntInput\r\n                type={type}\r\n                className={`input__select ${inputClassName}`}\r\n                onChange={onChange}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                name={name}\r\n                prefix={Prefix}\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { ApiService } from '.';\r\nimport { ERROR_CODES } from '../constants/errorCodes';\r\nimport { notify } from '../services/notifications';\r\n\r\ninterface IRegisternParams {\r\n    username: string;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    password: string;\r\n    password2: string;\r\n}\r\n\r\nexport const register = async (data: IRegisternParams) => {\r\n    const resp = await ApiService<any>({ method: 'PUT', url: 'user/native_registration', data });\r\n    if ((resp as any)?.data?.error_id && (resp as any)?.data?.error_id !== 0) {\r\n        notify({ type: 'WARNING', description: ERROR_CODES[(resp as any)?.data?.error_id] });\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n","import { FC } from 'react';\r\nimport { Button, Form } from 'antd';\r\nimport { useRegister } from './useRegister';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { useIsMobile } from '../../context/useIsMobile';\r\nimport { ImgRegister } from '../../assets';\r\nimport { Input } from '../../components/input';\r\n\r\nimport './style.css';\r\n\r\nconst { Item } = Form;\r\n\r\nconst Register: FC = () => {\r\n    const { onRegister, registrationSuccessful, formTitle, formSubtitle, onFormChange, registerDisabled } =\r\n        useRegister();\r\n    const { t } = useTranslation();\r\n    const isMobile = useIsMobile();\r\n\r\n    return (\r\n        <div className=\"register\">\r\n            {!isMobile && (\r\n                <div className=\"register__image\">\r\n                    <img src={ImgRegister} alt=\"Register img\" />\r\n                </div>\r\n            )}\r\n            <div className=\"register__form\">\r\n                <h4 className=\"register__form-title\">{t(formTitle)}</h4>\r\n                <p className=\"register__form-description\">{t(formSubtitle)}</p>\r\n                {!registrationSuccessful && (\r\n                    <Form name=\"register-form\" onFinish={onRegister} onValuesChange={onFormChange}>\r\n                        <Item name=\"nickname\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder={t('lblUsername')}\r\n                                label={t('lblUsername')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"first_name\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder={t('lblFirstName')}\r\n                                label={t('lblFirstName')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"last_name\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder={t('lblLastName')}\r\n                                label={t('lblLastName')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"email\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"email\"\r\n                                placeholder={t('lblEmail')}\r\n                                label={t('lblEmail')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"password\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"password\"\r\n                                placeholder={t('lblPassword')}\r\n                                label={t('lblPassword')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <Item name=\"password2\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                            <Input\r\n                                type=\"password\"\r\n                                placeholder={t('lblRetypePassword')}\r\n                                label={t('lblRetypePassword')}\r\n                                labelClassName=\"register__form-input-label\"\r\n                                inputClassName=\"register__form-input\"\r\n                            />\r\n                        </Item>\r\n                        <div className=\"register__form-actions\">\r\n                            <Button className=\"register__form-register\" disabled={registerDisabled} htmlType=\"submit\">\r\n                                {t('lblRegister')}\r\n                            </Button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","import { useCallback, useState } from 'react';\r\nimport { register } from '../../api/register';\r\n\r\nexport const useRegister = () => {\r\n    const onRegister = useCallback(async (values) => {\r\n        const successful = await register(values);\r\n        setRegistrationSuccessful(successful);\r\n    }, []);\r\n    const [registrationSuccessful, setRegistrationSuccessful] = useState<boolean>(false);\r\n    const [registerDisabled, setRegisterDisabled] = useState<boolean>(true);\r\n\r\n    const formTitle = registrationSuccessful ? 'lblRegistrationSuccessful' : 'lblCreateAccount';\r\n    const formSubtitle = registrationSuccessful ? 'lblRegistrationSuccessfulMessage' : 'lblCreateAccountDescription';\r\n\r\n    const onFormChange = useCallback((_, values: any) => {\r\n        const { password, password2 } = values;\r\n        if (!password || !password2) {\r\n            setRegisterDisabled(true);\r\n            return;\r\n        }\r\n        return setRegisterDisabled(password !== password2);\r\n    }, []);\r\n\r\n    return {\r\n        onRegister,\r\n        registrationSuccessful,\r\n        formTitle,\r\n        formSubtitle,\r\n        onFormChange,\r\n        registerDisabled,\r\n    };\r\n};\r\n"],"sourceRoot":""}