{"version":3,"sources":["components/input/Input.tsx","api/changePassword.ts","pages/reset-password/ResetPassword.tsx","pages/reset-password/useResetPassword.ts"],"names":["Input","props","label","onChange","value","placeholder","type","name","labelClassName","inputClassName","Prefix","disabled","infoText","required","className","title","InfoCircleOutlined","prefix","changePassword","data","a","ApiService","method","url","resp","error_id","notify","description","ERROR_CODES","changePasswordRequest","Item","Form","ResetPassword","navigate","useNavigate","useState","resetPasswordDisabled","setResetPasswordDisabled","onFormChange","useCallback","_","values","password","password2","onChangePassword","useResetPassword","t","useTranslation","isMobile","useIsMobile","src","ImgResetPassword","alt","onFinish","onValuesChange","rules","message","htmlType"],"mappings":"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","file":"static/js/17.e6ab8e22.chunk.js","sourcesContent":["import { ChangeEventHandler, FC } from 'react';\r\nimport { Input as AntInput, Tooltip } from 'antd';\r\n\r\nimport './Input.css';\r\nimport { InfoCircleOutlined } from '@ant-design/icons';\r\n\r\ninterface Props {\r\n    label?: string;\r\n    onChange?: ChangeEventHandler<HTMLInputElement>;\r\n    value?: string | number | undefined;\r\n    placeholder?: string;\r\n    type?: string;\r\n    name?: string;\r\n    labelClassName?: string;\r\n    inputClassName?: string;\r\n    Prefix?: JSX.Element;\r\n    disabled?: boolean;\r\n    infoText?: string;\r\n    required?: boolean;\r\n}\r\n\r\nexport const Input: FC<Props> = (props) => {\r\n    const {\r\n        label,\r\n        onChange,\r\n        value,\r\n        placeholder,\r\n        type = 'text',\r\n        name,\r\n        labelClassName = '',\r\n        inputClassName = '',\r\n        Prefix,\r\n        disabled,\r\n        infoText,\r\n        required,\r\n    } = props;\r\n    return (\r\n        <div className=\"input__wrapper\">\r\n            <div className=\"info-text-wrapper\">\r\n                <div>\r\n                    <label className={`input__label ${labelClassName}`}>{label}</label>\r\n                    {required && <span className=\"input__label-required\">*</span>}\r\n                </div>\r\n                {infoText && (\r\n                    <Tooltip title={infoText}>\r\n                        <InfoCircleOutlined />\r\n                    </Tooltip>\r\n                )}\r\n            </div>\r\n\r\n            <AntInput\r\n                type={type}\r\n                className={`input__select ${inputClassName}`}\r\n                onChange={onChange}\r\n                value={value}\r\n                placeholder={placeholder}\r\n                name={name}\r\n                prefix={Prefix}\r\n                disabled={disabled}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { ApiService } from '.';\r\nimport { ERROR_CODES } from '../constants/errorCodes';\r\nimport { notify } from '../services/notifications';\r\n\r\nexport const changePassword = async (data: { password: string; password2: string }) => {\r\n    const resp = await ApiService<any>({ method: 'PUT', url: 'user/password_reset_confirmation', data });\r\n    if ((resp as any)?.data?.error_id && (resp as any)?.data?.error_id !== 0) {\r\n        notify({ type: 'WARNING', description: ERROR_CODES[(resp as any)?.data?.error_id] });\r\n        return false;\r\n    } else {\r\n        notify({ type: 'WARNING', description: 'lblPasswordResetConfirmationMessage' });\r\n        return true;\r\n    }\r\n};\r\n\r\nexport const changePasswordRequest = async (data: {\r\n    password: string;\r\n    new_password: string;\r\n    new_password_2: string;\r\n}) => {\r\n    const resp = await ApiService<any>({ method: 'PUT', url: 'user/password', data });\r\n    if ((resp as any)?.data?.error_id && (resp as any)?.data?.error_id !== 0) {\r\n        notify({ type: 'WARNING', description: ERROR_CODES[(resp as any)?.data?.error_id] });\r\n    }\r\n};\r\n","import { Button, Form } from 'antd';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ImgResetPassword } from '../../assets';\r\nimport { Input } from '../../components/input';\r\nimport { useIsMobile } from '../../context/useIsMobile';\r\nimport { useResetPassword } from './useResetPassword';\r\n\r\nimport './style.css';\r\n\r\nconst { Item } = Form;\r\n\r\nconst ResetPassword = () => {\r\n    const { resetPasswordDisabled, onChangePassword, onFormChange } = useResetPassword();\r\n    const { t } = useTranslation();\r\n    const isMobile = useIsMobile();\r\n    return (\r\n        <div className=\"change-password\">\r\n            {!isMobile && (\r\n                <div className=\"change-password__image\">\r\n                    <img src={ImgResetPassword} alt=\"Confirm email img\" />\r\n                </div>\r\n            )}\r\n            <div className=\"change-password__form\">\r\n                <Form name=\"change-password-form\" onFinish={onChangePassword} onValuesChange={onFormChange}>\r\n                    <Item name=\"password\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                        <Input\r\n                            type=\"password\"\r\n                            placeholder={t('lblPassword')}\r\n                            label={t('lblPassword')}\r\n                            labelClassName=\"change-password__form-input-label\"\r\n                            inputClassName=\"change-password__form-input\"\r\n                        />\r\n                    </Item>\r\n                    <Item name=\"password2\" rules={[{ required: true, message: t('lblRequired') }]}>\r\n                        <Input\r\n                            type=\"password\"\r\n                            placeholder={t('lblRetypePassword')}\r\n                            label={t('lblRetypePassword')}\r\n                            labelClassName=\"change-password__form-input-label\"\r\n                            inputClassName=\"change-password__form-input\"\r\n                        />\r\n                    </Item>\r\n                    <div className=\"change-password__form-actions\">\r\n                        <Button\r\n                            className=\"change-password__form-change-password\"\r\n                            disabled={resetPasswordDisabled}\r\n                            htmlType=\"submit\"\r\n                        >\r\n                            {t('lblResetPassword')}\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import { useCallback, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { changePassword } from '../../api/changePassword';\r\n\r\nexport const useResetPassword = () => {\r\n    const navigate = useNavigate();\r\n    const [resetPasswordDisabled, setResetPasswordDisabled] = useState<boolean>(true);\r\n\r\n    const onFormChange = useCallback((_, values: any) => {\r\n        const { password, password2 } = values;\r\n        if (!password || !password2) {\r\n            setResetPasswordDisabled(true);\r\n            return;\r\n        }\r\n        return setResetPasswordDisabled(password !== password2);\r\n    }, []);\r\n\r\n    const onChangePassword = useCallback(\r\n        async (values) => {\r\n            const successful = await changePassword(values);\r\n            if (successful) {\r\n                navigate('/login');\r\n            }\r\n        },\r\n        [navigate]\r\n    );\r\n\r\n    return { resetPasswordDisabled, onChangePassword, onFormChange };\r\n};\r\n"],"sourceRoot":""}