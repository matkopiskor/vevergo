{"version":3,"sources":["api/changeEmailConfirmation.ts","pages/change-email-confirmation/ChangeEmailConfirmation.tsx","pages/change-email-confirmation/useChangeEmailConfirmation.ts"],"names":["changeEmailConfirmation","data","a","ApiService","method","url","resp","error_id","notify","type","description","ERROR_CODES","ChangeEmailConfirmation","isEmailChangeConfirmed","navigate","useNavigate","dispatch","useAppDispatch","useState","setIsEmailChangeConfirmed","useSearchParams","searchParams","fetchData","useCallback","params","forEach","value","key","success","useEffect","addToLoading","setTimeout","removeFromLoading","console","log","useChangeEmailConfirmation","t","useTranslation","isMobile","useIsMobile","className","src","ImgConfirmationEmail","alt"],"mappings":"+OAIaA,EAAuB,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEAChBC,YAAgB,CAAEC,OAAQ,MAAOC,IAAK,iCAAkCJ,SADxD,YAE/B,QADEK,EAD6B,cAE/B,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,WAA8C,KAAlC,OAACD,QAAD,IAACA,GAAD,UAACA,EAAcL,YAAf,eAAqBM,UAFvB,uBAG/BC,YAAO,CAAEC,KAAM,UAAWC,YAAaC,IAAW,OAAEL,QAAF,IAAEA,GAAF,UAAEA,EAAcL,YAAhB,aAAC,EAAqBM,YAHzC,mBAIxB,GAJwB,iCAM5B,GAN4B,2CAAH,sD,gCCwBrBK,UApBqB,WAAO,IAC/BC,ECH8B,WACtC,IAAMC,EAAWC,cAEXC,EAAWC,cAH2B,EAIgBC,oBAAkB,GAJlC,mBAIrCL,EAJqC,KAIbM,EAJa,OAMrBC,cAAhBC,EANqC,oBAQtCC,EAAYC,sBAAW,uCAAC,WAAOC,GAAP,iBAAAtB,EAAA,6DACpBD,EAAY,GAElBuB,EAAOC,SAAQ,SAACC,EAAOC,GACP,UAARA,IACA1B,EAAK0B,GAAOD,GAEJ,oBAARC,IACA1B,EAAK0B,GAAOD,MARM,SAYJ1B,EAAwBC,GAZpB,OAYpB2B,EAZoB,OAa1BT,EAA0BS,GAbA,2CAAD,sDAc1B,IAiBH,OAfAC,qBAAU,WACNP,EAAUD,KACX,CAACC,EAAWD,IAEfQ,qBAAU,WACFhB,IACAG,EAASc,eACTC,YAAW,WACPf,EAASgB,eACTC,QAAQC,IAAI,KACZpB,EAAS,YACV,QAER,CAACE,EAAUH,EAAwBC,IAE/B,CACHD,0BDrC+BsB,GAA3BtB,uBACAuB,EAAMC,cAAND,EACFE,EAAWC,cACjB,OACI,sBAAKC,UAAU,4BAAf,WACMF,GACE,qBAAKE,UAAU,mCAAf,SACI,qBAAKC,IAAKC,IAAsBC,IAAI,wBAG5C,qBAAKH,UAAU,kCAAf,SACK3B,GACG,oBAAI2B,UAAU,wCAAd,SAAuDJ,EAAE","file":"static/js/20.6a634722.chunk.js","sourcesContent":["import { ApiService } from '.';\r\nimport { ERROR_CODES } from '../constants/errorCodes';\r\nimport { notify } from '../services/notifications';\r\n\r\nexport const changeEmailConfirmation = async (data: { email: string; confirmation_id: string }) => {\r\n    const resp = await ApiService<any>({ method: 'PUT', url: 'user/registration_confirmation', data });\r\n    if ((resp as any)?.data?.error_id && (resp as any)?.data?.error_id !== 0) {\r\n        notify({ type: 'WARNING', description: ERROR_CODES[(resp as any)?.data?.error_id] });\r\n        return false;\r\n    }\r\n    return true;\r\n};\r\n","import { FC } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { ImgConfirmationEmail } from '../../assets';\r\nimport { useIsMobile } from '../../context/useIsMobile';\r\nimport { useChangeEmailConfirmation } from './useChangeEmailConfirmation';\r\n\r\nimport './style.css';\r\n\r\nconst ChangeEmailConfirmation: FC = () => {\r\n    const { isEmailChangeConfirmed } = useChangeEmailConfirmation();\r\n    const { t } = useTranslation();\r\n    const isMobile = useIsMobile();\r\n    return (\r\n        <div className=\"change-email-confirmation\">\r\n            {!isMobile && (\r\n                <div className=\"change-email-confirmation__image\">\r\n                    <img src={ImgConfirmationEmail} alt=\"Confirm email img\" />\r\n                </div>\r\n            )}\r\n            <div className=\"change-email-confirmation__form\">\r\n                {isEmailChangeConfirmed && (\r\n                    <h4 className=\"change-email-confirmation__form-title\">{t('lblResetPassword')}</h4>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChangeEmailConfirmation;\r\n","import { useCallback, useEffect, useState } from 'react';\r\nimport { useNavigate, useSearchParams } from 'react-router-dom';\r\nimport { changeEmailConfirmation } from '../../api/changeEmailConfirmation';\r\nimport { useAppDispatch } from '../../redux/hooks';\r\nimport { addToLoading, removeFromLoading } from '../../redux/reducers/loadingReducer';\r\n\r\nexport const useChangeEmailConfirmation = () => {\r\n    const navigate = useNavigate();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const [isEmailChangeConfirmed, setIsEmailChangeConfirmed] = useState<boolean>(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n\r\n    const fetchData = useCallback(async (params: URLSearchParams) => {\r\n        const data: any = {};\r\n\r\n        params.forEach((value, key) => {\r\n            if (key === 'email') {\r\n                data[key] = value;\r\n            }\r\n            if (key === 'confirmation_id') {\r\n                data[key] = value;\r\n            }\r\n        });\r\n\r\n        const success = await changeEmailConfirmation(data);\r\n        setIsEmailChangeConfirmed(success);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        fetchData(searchParams);\r\n    }, [fetchData, searchParams]);\r\n\r\n    useEffect(() => {\r\n        if (isEmailChangeConfirmed) {\r\n            dispatch(addToLoading());\r\n            setTimeout(() => {\r\n                dispatch(removeFromLoading());\r\n                console.log('a');\r\n                navigate('/login');\r\n            }, 2000);\r\n        }\r\n    }, [dispatch, isEmailChangeConfirmed, navigate]);\r\n\r\n    return {\r\n        isEmailChangeConfirmed,\r\n    };\r\n};\r\n"],"sourceRoot":""}